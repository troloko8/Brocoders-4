{"version":3,"sources":["store/mainContainer/action.js","store/mainContainer/reducers.js","store/stopwatch/reducers.js","store/reducers.js","store/stopwatch/actions.js","components/TabPanel.jsx","components/TableTasks.jsx","components/Chart.jsx","components/AllInfoTasks.jsx","components/Stopwatch.jsx","components/MainContainer.jsx","Timer.js","serviceWorker.js","index.js"],"names":["setButtonText","text","type","payload","defaultState","name","timeToStart","timeToStop","timeToSpend","combineReducers","mainContainer","state","action","stopwatch","TabPanel","props","children","value","index","other","Typography","component","role","hidden","id","aria-labelledby","Box","blue900","blue","blue50","ButtonTable","styled","Button","color","backgroundColor","boxShadow","StyledTableCell","withStyles","theme","head","palette","common","grey","body","TableCell","StyledTableRow","root","background","default","TableRow","number","nameTask","timeStart","timeEnd","timeSpend","info","buttonDelete","rows","connect","Table","TableHead","align","TableBody","map","row","key","scope","Chart","width","height","data","margin","top","right","bottom","left","dataKey","stroke","barSize","fill","cyan500","cyan","a11yProps","useStyles","makeStyles","tabs","tab","minWidth","mapDispatchToProps","React","useState","setValue","classes","AppBar","position","Tabs","className","onChange","event","newValue","aria-label","Tab","label","pink600","pink","taskTimer","borderRadius","display","alignItems","timer","fontSize","buttonStopOrStart","marginBottom","taskContainer","flexDirection","justifyContent","taskNameInput","textAlignLast","modal","padding","transform","modalTitle","modalText","modalButton","getNameStopwatch","getTimeToStartStopwatch","getTimeToStopStopwatch","getTimeToSpendStopwatch","runningTime","setRunningTime","Date","now","setTimer","modalStatus","setModalStatus","taskName","setTaskName","TextField","placeholder","inputProps","e","target","moment","utc","format","variant","onClick","currentTarget","startTime","setInterval","handleClick","clearInterval","push","length","toggleValue","Modal","open","Fragment","CssBaseline","Container","maxWidth","style","store","createStore","rootReducer","Timer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.48b717ec.chunk.js","sourcesContent":["export const CONTAINER_CHANGE_BUTTON_TEXT = 'CONTAINER_CHANGE_BUTTON_TEXT';\r\n\r\nexport const setButtonText = text => ({\r\n  type: CONTAINER_CHANGE_BUTTON_TEXT,\r\n  payload: text\r\n})","import { CONTAINER_CHANGE_BUTTON_TEXT } from './action';\r\n\r\nconst defaultState = {\r\n  text: 'start',\r\n};\r\n\r\nexport const mainContainerReducer = (state = defaultState, action) => {\r\n  switch (action.type) {\r\n    case CONTAINER_CHANGE_BUTTON_TEXT:\r\n      return {\r\n        ...state,\r\n        text: action.payload\r\n      }\r\n  }\r\n  return state;\r\n}","import {\r\n  GET_STOPWATCH_NAME_TASK,\r\n  GET_STOPWATCH_TIME_TO_START,\r\n  GET_STOPWATCH_TIME_TO_END,\r\n  GET_STOPWATCH_TIME_TO_SPEND\r\n} from './actions';\r\n\r\nconst defaultState = {\r\n  name: ' ',\r\n  timeToStart: ' ',\r\n  timeToStop: ' ',\r\n  timeToSpend: ' '\r\n};\r\n\r\nexport const stopwatchReducer = (state = defaultState, action) => {\r\n  switch (action.type) {\r\n    case GET_STOPWATCH_NAME_TASK:\r\n      return {\r\n        ...state,\r\n        name: action.payload\r\n      }\r\n    case GET_STOPWATCH_TIME_TO_START:\r\n      return {\r\n        ...state,\r\n        timeToStart: action.payload\r\n      }\r\n    case GET_STOPWATCH_TIME_TO_END:\r\n      return {\r\n        ...state,\r\n        timeToStop: action.payload\r\n      }\r\n    case GET_STOPWATCH_TIME_TO_SPEND:\r\n      return {\r\n        ...state,\r\n        timeToSpend: action.payload\r\n      }\r\n  }\r\n\r\n  return state;\r\n}","import { combineReducers } from \"redux\";\r\nimport { mainContainerReducer } from \"./mainContainer/reducers\";\r\nimport { stopwatchReducer } from \"./stopwatch/reducers\";\r\n\r\nexport default combineReducers({\r\n  mainContainer: mainContainerReducer,\r\n  stopwatch: stopwatchReducer\r\n});","export const GET_STOPWATCH_NAME_TASK = 'GET_STOPWATCH_NAME_TASK';\r\nexport const GET_STOPWATCH_TIME_TO_START = 'GET_STOPWATCH_TIME_TO_START';\r\nexport const GET_STOPWATCH_TIME_TO_END = 'GET_STOPWATCH_TIME_TO_END';\r\nexport const GET_STOPWATCH_TIME_TO_SPEND = 'GET_OPWATCH_TIME_TO_SPEND';\r\n\r\nexport const getNameStopwatch = name => ({\r\n  type: GET_STOPWATCH_NAME_TASK,\r\n  payload: name\r\n})\r\n\r\nexport const getTimeToStartStopwatch = timeToStart => ({\r\n  type: GET_STOPWATCH_TIME_TO_START,\r\n  payload: timeToStart\r\n})\r\n\r\nexport const getTimeToStopStopwatch = timeToStop => ({\r\n  type: GET_STOPWATCH_TIME_TO_END,\r\n  payload: timeToStop\r\n})\r\n\r\nexport const getTimeToSpendStopwatch = timeToSpend => ({\r\n  type: GET_STOPWATCH_TIME_TO_SPEND,\r\n  payload: timeToSpend\r\n})\r\n","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nexport default function TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <Typography\r\n      component=\"div\"\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      <Box>{children}</Box>\r\n    </Typography>\r\n  );\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { withStyles, styled } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Button from '@material-ui/core/Button';\r\nimport blue from '@material-ui/core/colors/blue';\r\nimport { connect } from 'react-redux';\r\n\r\nconst blue900 = blue[900];\r\nconst blue50 = blue[50];\r\n\r\nconst ButtonTable = styled(Button)({\r\n  color: blue900,\r\n  backgroundColor: 'white',\r\n  boxShadow: '0 0  5px -1px grey',\r\n})\r\n\r\nconst StyledTableCell = withStyles(theme => ({\r\n  head: {\r\n    color: theme.palette.common.grey,\r\n  },\r\n  body: {\r\n    backgroundColor: blue50,\r\n  }\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles(theme => ({\r\n  root: {\r\n    \"&:nth-of-type(odd)\": {\r\n      backgroundColor: theme.palette.background.default\r\n    }\r\n  }\r\n}))(TableRow);\r\n\r\nfunction createData(number, nameTask, timeStart, timeEnd, timeSpend, info, buttonDelete) {\r\n  return { number, nameTask, timeStart, timeEnd, timeSpend, info, buttonDelete };\r\n}\r\n\r\nexport const rows = [\r\n  createData(1, 'some name', 'some time to start', 'some time to end', 'some time to spend', <ButtonTable>info</ButtonTable>, <ButtonTable>delete</ButtonTable>),\r\n];\r\n\r\nfunction TableTasks(props) {\r\n\r\n\r\n  // useEffect(() => {\r\n  //   console.log(props)\r\n  //   rows.push({\r\n  //     nameTask: props.name,\r\n  //     number: rows.length + 1,\r\n  //     timeEnd: props.timeToStop,\r\n  //     timeSpend: props.timeToSpend,\r\n  //     timeStart: props.timeToStart,\r\n  //     info: <Button>info</Button>,\r\n  //     buttonDelete: <Button>Delete</Button>\r\n  //   })\r\n  // }, [props.timeToSpend])\r\n\r\n  return (\r\n    <Table  >\r\n      <TableHead>\r\n        <TableRow>\r\n          <StyledTableCell>№</StyledTableCell>\r\n          <StyledTableCell align=\"left\">Task</StyledTableCell>\r\n          <StyledTableCell align=\"left\">Time start</StyledTableCell>\r\n          <StyledTableCell align=\"left\">Time end</StyledTableCell>\r\n          <StyledTableCell align=\"left\">Time spend</StyledTableCell>\r\n          <StyledTableCell align=\"left\">Info</StyledTableCell>\r\n          <StyledTableCell align=\"left\">Delete</StyledTableCell>\r\n        </TableRow>\r\n      </TableHead>\r\n      <TableBody>\r\n        {rows.map(row => (\r\n          <StyledTableRow key={row.number}>\r\n            <StyledTableCell component=\"th\" scope=\"row\">\r\n              {row.number}\r\n            </StyledTableCell>\r\n            <StyledTableCell align=\"left\">{row.nameTask}</StyledTableCell>\r\n            <StyledTableCell align=\"left\">{row.timeStart}</StyledTableCell>\r\n            <StyledTableCell align=\"left\">{row.timeEnd}</StyledTableCell>\r\n            <StyledTableCell align=\"left\">{row.timeSpend}</StyledTableCell>\r\n            <StyledTableCell align=\"left\">{row.info}</StyledTableCell>\r\n            <StyledTableCell align=\"left\">{row.buttonDelete}</StyledTableCell>\r\n          </StyledTableRow>\r\n        ))}\r\n      </TableBody>\r\n    </Table>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    name: state.stopwatch.name,\r\n    timeToStart: state.stopwatch.timeToStart,\r\n    timeToStop: state.stopwatch.timeToStop,\r\n    timeToSpend: state.stopwatch.timeToSpend,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TableTasks)","import React from 'react';\r\nimport {\r\n  ComposedChart, Bar, XAxis, YAxis, CartesianGrid, Legend,\r\n} from 'recharts';\r\n\r\nexport default function Chart() {\r\n  const data = [\r\n    {\r\n      \"name\": \"1\",\r\n      \"minute in this hourse\": 60,\r\n    },\r\n    {\r\n      \"name\": \"2\",\r\n      \"minute in this hourse\": 30,\r\n    },\r\n    {\r\n      \"name\": \"3\",\r\n      \"minute in this hourse\": 45,\r\n    }\r\n  ]\r\n\r\n  return (\r\n    <ComposedChart width={1000} height={350} data={data} margin={{ top: 50, right: 0, bottom: 0, left: 0 }}>\r\n      <XAxis dataKey=\"name\" />\r\n      <YAxis />\r\n      <Legend />\r\n      <CartesianGrid stroke=\"#f5f5f5\" />\r\n      <Bar dataKey=\"minute in this hourse\" barSize={20} fill=\"#413ea0\" />\r\n    </ComposedChart >\r\n  )\r\n}\r\n\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport TabPanel from './TabPanel'\r\nimport cyan from '@material-ui/core/colors/cyan';\r\nimport TableTasks from './TableTasks';\r\nimport Chart from './Chart';\r\nimport { connect } from 'react-redux';\r\nimport { setButtonText } from './../store/mainContainer/action'\r\n\r\nconst cyan500 = cyan[500]\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    \"aria-controls\": `simple-tabpanel-${index}`\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  tabs: {\r\n    background: cyan500\r\n  },\r\n  tab: {\r\n    minWidth: '50%'\r\n  }\r\n});\r\n\r\nfunction AllInfoTasks(props) {\r\n  const [value, setValue] = React.useState(0);\r\n  const classes = useStyles();\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <AppBar position=\"static\" component=\"div\">\r\n        <Tabs\r\n          className={classes.tabs}\r\n          value={value}\r\n          onChange={handleChange}\r\n          aria-label=\"simple tabs example\"\r\n        >\r\n          <Tab className={classes.tab} label=\"task log\" {...a11yProps(0)} />\r\n          <Tab className={classes.tab} label=\"task chart\" {...a11yProps(0)} />\r\n        </Tabs>\r\n      </AppBar>\r\n      <TabPanel value={value} index={0}>\r\n        <TableTasks />\r\n      </TabPanel>\r\n      <TabPanel value={value} index={1}>\r\n        <Chart />\r\n      </TabPanel>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    text: state.mainContainer.text,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  setButtonText,\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AllInfoTasks)","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport blue from '@material-ui/core/colors/blue';\r\nimport pink from '@material-ui/core/colors/pink';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport { setButtonText } from './../store/mainContainer/action'\r\nimport {\r\n  getNameStopwatch,\r\n  getTimeToStartStopwatch,\r\n  getTimeToStopStopwatch,\r\n  getTimeToSpendStopwatch\r\n} from './../store/stopwatch/actions'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport moment from 'moment';\r\nimport { rows } from './TableTasks';\r\nimport Modal from '@material-ui/core/Modal';\r\n\r\nconst pink600 = pink[600]\r\nconst blue900 = blue[900]\r\n\r\nconst useStyles = makeStyles({\r\n  taskTimer: {\r\n    borderRadius: \"50%\",\r\n    boxShadow: '0 5px 10px 0px grey',\r\n    width: '200px',\r\n    height: '200px',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    margin: '30px 0'\r\n  },\r\n  timer: {\r\n    color: blue900,\r\n    fontSize: '30px',\r\n    margin: 'auto',\r\n  },\r\n  buttonStopOrStart: {\r\n    color: blue900,\r\n    boxShadow: '0 0  5px -1px grey',\r\n    marginBottom: '30px'\r\n  },\r\n  taskContainer: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center'\r\n  },\r\n  taskNameInput: {\r\n    textAlignLast: 'center',\r\n    color: blue900,\r\n  },\r\n  modal: {\r\n    width: '70%',\r\n    padding: '15px',\r\n    background: 'white',\r\n    height: '200px',\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50% , -50%)'\r\n  },\r\n  modalTitle: {\r\n    color: pink600,\r\n    fontSize: '20px',\r\n    marginBottom: '15px'\r\n  },\r\n  modalText: {\r\n    color: 'grey'\r\n  },\r\n  modalButton: {\r\n    color: blue900,\r\n    position: \"absolute\",\r\n    right: '15px',\r\n    bottom: '15px'\r\n  }\r\n})\r\n\r\nconst Stopwatch = (props) => {\r\n  const classes = useStyles();\r\n\r\n  const [runningTime, setRunningTime] = useState(0);\r\n  const [timer, setTimer] = useState(Date.now());\r\n  const [modalStatus, setModalStatus] = useState(false);\r\n  const [taskName, setTaskName] = useState('');\r\n\r\n  const changeTaskName = (e) => {\r\n    setTaskName(e.target.value)\r\n  }\r\n\r\n  const handleClick = () => {\r\n    const startTime = Date.now();\r\n\r\n    setTimer(setInterval(() => {\r\n      setRunningTime(Date.now() - startTime);\r\n    }))\r\n  }\r\n\r\n  const handleReset = () => {\r\n    clearInterval(timer)\r\n    setRunningTime(0)\r\n    setTaskName('')\r\n  };\r\n\r\n  const hadleButtonStart = (e) => {\r\n    taskName === \"\" ? setModalStatus(true) : setModalStatus(false)\r\n\r\n    if (taskName !== \"\") {\r\n      if (e.currentTarget.value === \"start\") {\r\n        handleClick()\r\n        props.getTimeToStartStopwatch(moment(Date.now()).format('LTS'))\r\n      } else {\r\n        handleReset()\r\n        props.getNameStopwatch(taskName)\r\n        props.getTimeToStopStopwatch(moment(Date.now()).format('LTS'))\r\n        props.getTimeToSpendStopwatch(moment.utc(runningTime).format(\"HH:mm:ss\"))\r\n        rows.push({\r\n          nameTask: props.name,\r\n          number: rows.length + 1,\r\n          timeEnd: props.timeToStop,\r\n          timeSpend: props.timeToSpend,\r\n          timeStart: props.timeToStart,\r\n          info: <Button>info</Button>,\r\n          buttonDelete: <Button>Delete</Button>\r\n        })\r\n      }\r\n\r\n      const toggleValue = (e.currentTarget.value === \"start\") ? \"stop\" : \"start\";\r\n      props.setButtonText(toggleValue)\r\n    }\r\n\r\n  }\r\n\r\n\r\n  const handleModalClose = () => {\r\n    setModalStatus(false)\r\n  }\r\n\r\n  return (\r\n    <div className={classes.taskContainer}>\r\n      <TextField\r\n        placeholder=\"Name of your task\"\r\n        inputProps={{ className: classes.taskNameInput }}\r\n        margin=\"normal\"\r\n        onChange={changeTaskName}\r\n        value={taskName}\r\n      />\r\n      <Box\r\n        className={classes.taskTimer}\r\n        children={\r\n          <Box\r\n            component=\"span\"\r\n            className={classes.timer}\r\n          >{moment.utc(runningTime).format(\"HH:mm:ss\")}</Box>}\r\n      />\r\n      <Button\r\n        variant=\"text\"\r\n        className={classes.buttonStopOrStart}\r\n        value={props.text}\r\n        onClick={hadleButtonStart}\r\n      >\r\n        {props.text}\r\n      </Button>\r\n      <Modal open={modalStatus} >\r\n        <div className={classes.modal}>\r\n          <h3 className={classes.modalTitle}> Empty task name</h3>\r\n          <p className={classes.modalText}>You are truing close your task without name? enter the title and try again!</p>\r\n          <Button\r\n            onClick={handleModalClose}\r\n            className={classes.modalButton}\r\n          >close</Button>\r\n        </div>\r\n      </Modal>\r\n    </div >\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    text: state.mainContainer.text,\r\n    name: state.stopwatch.name,\r\n    timeToStart: state.stopwatch.timeToStart,\r\n    timeToStop: state.stopwatch.timeToStop,\r\n    timeToSpend: state.stopwatch.timeToSpend,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  setButtonText,\r\n  getNameStopwatch,\r\n  getTimeToStartStopwatch,\r\n  getTimeToStopStopwatch,\r\n  getTimeToSpendStopwatch\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Stopwatch)","import React from 'react';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Container from '@material-ui/core/Container';\r\nimport AllInfoTasks from \"./AllInfoTasks\";\r\nimport Stopwatch from \"./Stopwatch\";\r\nimport { connect } from 'react-redux';\r\nimport { setButtonText } from './../store/mainContainer/action'\r\n\r\nfunction MainContainer(props) {\r\n\r\n  // const changeButtonText = (e) => {\r\n  //   let toggleValue = (e.currentTarget.value === \"start\") ? \"stop\" : \"start\";\r\n  //   props.setButtonText(toggleValue)\r\n  // }\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <Container maxWidth={false} style={{ width: '100%', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n        <Stopwatch />\r\n        <Container>\r\n          <AllInfoTasks />\r\n        </Container>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    text: state.mainContainer.text,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  setButtonText,\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MainContainer)\r\n","import React from 'react';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './store/reducers';\n// import './Timer.css';\nimport MainContainer from \"./components/MainContainer\";\n\nconst store = createStore(rootReducer);\n\nfunction Timer() {\n  return (\n    <Provider store={store}>\n      <MainContainer />\n    </Provider>\n  );\n}\n\nexport default Timer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Timer from './Timer';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Timer />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}